"""Entry point for AI Assistant"""
import os
import sys
import asyncio
import logging

logging.basicConfig(level=logging.DEBUG)

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

try:
    from ai_assistant import SmartDeepThinkRAG
    from ai_assistant.registration.auth_manager import AuthManager
    from ai_assistant.registration.auth_ui import AuthUI
    from ai_assistant.registration.database import DatabaseManager
    from ai_assistant.src.logging_setup import setup_logging
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", current_dir)
    print("üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    for item in os.listdir(current_dir):
        print(f"   - {item}")
    
    if os.path.exists('src'):
        print("üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ src/:")
        for item in os.listdir('src'):
            print(f"   - {item}")
    
    if os.path.exists('registration'):
        print("üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ registration/:")
        for item in os.listdir('registration'):
            print(f"   - {item}")
    
    sys.exit(1)

class AIAssistantApp:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AI Assistant —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.logger = setup_logging()
        self.db_manager = None
        self.auth_manager = None
        self.auth_ui = None
        self.assistant = None
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            connection_string = self._get_connection_string()
            self.db_manager = DatabaseManager(connection_string)
            await self.db_manager.connect()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            self.auth_manager = AuthManager(self.db_manager)
            self.auth_ui = AuthUI(self.auth_manager)
            
            self.logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL")
            raise
    
    def _get_connection_string(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –≤ Docker"""
        return "postgresql://postgres@localhost:5432/bank_assistant"

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            await self.initialize()
            
            while True:
                try:
                    self.auth_ui.show_welcome()
                    choice = self.auth_ui.get_menu_choice()
                    
                    if choice == '1':  # –í—Ö–æ–¥
                        if await self.auth_ui.handle_login():
                            await self._run_assistant()
                    
                    elif choice == '2':  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                        await self.auth_ui.handle_registration()
                    
                    elif choice == '3':  # –í—ã—Ö–æ–¥
                        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        break
                        
                except (KeyboardInterrupt, EOFError):
                    print("\nüëã –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                    
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            if self.db_manager:
                await self.db_manager.close()

    async def _run_assistant(self):
        """–ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –≤–≤–æ–¥–æ–º –≤ executor"""
        if not self.assistant:
            self.assistant = SmartDeepThinkRAG()
        
        user = self.auth_manager.get_current_user()
        self._show_assistant_welcome(user)
        
        import asyncio
        
        while True:
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º input –≤ thread executor —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
                loop = asyncio.get_event_loop()
                question = await loop.run_in_executor(
                    None, input, "\nüí¨ –í–∞—à –≤–æ–ø—Ä–æ—Å: "
                )
                question = question.strip()
                
                if not question:
                    continue
                    
                if question.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥', 'logout']:
                    self.auth_manager.logout()
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                    
                await self.assistant.ask_streaming_wrapper(question)
                
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                self.auth_manager.logout()
                break
            except EOFError:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                self.auth_manager.logout()
                break

    def _show_assistant_welcome(self, user: dict):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        import os
        os.system('clear' if os.name == 'posix' else 'cls')
        print(f"üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['full_name']}!")
        print(f"üë§ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {user['login']}")
        print("ü§ñ AI Assistant –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üí° –î–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–±–∞–≤—å—Ç–µ '-deepthink' –∫ –≤–æ–ø—Ä–æ—Å—É")
        print("üö™ –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit', 'quit' –∏–ª–∏ '–≤—ã—Ö–æ–¥'")
        print("=" * 60)

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = AIAssistantApp()
    
    try:
        asyncio.run(app.run())
    except KeyboardInterrupt:
        print("\nüëã –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())