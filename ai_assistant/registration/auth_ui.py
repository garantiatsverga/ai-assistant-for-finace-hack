import getpass
import re
from typing import Optional, Tuple, Dict, Any
from datetime import datetime, date
from .auth_manager import AuthManager

class AuthUI:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self, auth_manager: AuthManager):
        self.auth = auth_manager
    
    def clear_screen(self):
        """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞"""
        import os
        os.system('clear' if os.name == 'posix' else 'cls')
    
    def show_welcome(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
        self.clear_screen()
        print("üéØ –ë–ê–ù–ö–û–í–°–ö–ò–ô –ò–ò-–ê–°–°–ò–°–¢–ï–ù–¢")
        print("=" * 50)
        print("1. –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        print("2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        print("3. –í—ã—Ö–æ–¥")
        print("=" * 50)
    
    def get_menu_choice(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        while True:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-3): ").strip()
            if choice in ['1', '2', '3']:
                return choice
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    async def handle_login(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
        self.clear_screen()
        print("üîê –í–•–û–î –í –°–ò–°–¢–ï–ú–£")
        print("=" * 40)
        print("–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –ª–æ–≥–∏–Ω, email –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        print("=" * 40)
        
        identifier = input("–õ–æ–≥–∏–Ω/Email/–¢–µ–ª–µ—Ñ–æ–Ω: ").strip()
        password = getpass.getpass("–ü–∞—Ä–æ–ª—å: ")
        
        if not identifier or not password:
            print("\n‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return False
        
        result = await self.auth.login(identifier, password)
        
        if result["success"]:
            user = result["user"]
            print(f"\n‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['full_name']}!")
            print(f"üë§ –õ–æ–≥–∏–Ω: {user['login']}")
            print(f"üìß Email: {user['email']}")
            print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return True
        else:
            print(f"\n‚ùå {result['error']}")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return False
    
    async def handle_registration(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.clear_screen()
        print("üìù –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø")
        print("=" * 40)
        
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            user_data = {}
            
            user_data['login'] = self._get_valid_login()
            if not user_data['login']:
                return False
            
            user_data['password'] = self._get_valid_password()
            if not user_data['password']:
                return False
            
            user_data['email'] = self._get_valid_email()
            if not user_data['email']:
                return False
            
            user_data['full_name'] = self._get_valid_full_name()
            if not user_data['full_name']:
                return False
            
            user_data['passport_series'], user_data['passport_number'] = self._get_valid_passport()
            if not user_data['passport_series']:
                return False
            
            user_data['birth_date'] = self._get_valid_birth_date()
            if not user_data['birth_date']:
                return False
            
            user_data['phone'] = self._get_valid_phone()
            if not user_data['phone']:
                return False
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if not self._confirm_registration(user_data):
                return False
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            result = await self.auth.register(**user_data)
            
            if result["success"]:
                print(f"\n‚úÖ {result['message']}")
                print("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            else:
                print(f"\n‚ùå {result['error']}")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return False
                
        except KeyboardInterrupt:
            print("\n\n‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            return False
    
    def _get_valid_login(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞"""
        while True:
            login = input("–õ–æ–≥–∏–Ω (3-50 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã/_): ").strip()
            if 3 <= len(login) <= 50:
                if re.match(r'^[a-zA-Z0-9_]+$', login):
                    return login
                else:
                    print("‚ùå –õ–æ–≥–∏–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ")
            else:
                print("‚ùå –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤")
    
    def _get_valid_password(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏ —á–µ—Ä–µ–∑ stdiomask"""
        try:
            import stdiomask
            
            while True:
                password = stdiomask.getpass("–ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤): ", mask='*')
                
                if len(password) < 6:
                    print("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.")
                    continue
                
                confirm = stdiomask.getpass("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ", mask='*')
                
                if password == confirm:
                    return password
                else:
                    print("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")
                    
        except ImportError:
            # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π getpass
            import getpass
            print("‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 'pip install stdiomask' –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–≤–µ–∑–¥–æ—á–µ–∫")
            password = getpass.getpass("–ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤): ")
            confirm = getpass.getpass("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
            return password if password == confirm else ""

    def _get_valid_email(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ email"""
        while True:
            email = input("Email: ").strip().lower()
            if '@' in email and len(email) <= 100:
                email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
                if re.match(email_pattern, email):
                    return email
                else:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")
            else:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")
    
    def _get_valid_full_name(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –§–ò–û"""
        while True:
            full_name = input("–§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á): ").strip()
            if 2 <= len(full_name) <= 200 and len(full_name.split()) >= 2:
                return full_name
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞, –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).")
    
    def _get_valid_passport(self) -> Tuple[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Å–ø–æ—Ä—Ç–∞"""
        while True:
            passport_series = input("–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞ (4 —Ü–∏—Ñ—Ä—ã): ").strip()
            passport_number = input("–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (6 —Ü–∏—Ñ—Ä): ").strip()
            
            if (passport_series.isdigit() and len(passport_series) == 4 and
                passport_number.isdigit() and len(passport_number) == 6):
                return passport_series, passport_number
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ (4 —Ü–∏—Ñ—Ä—ã —Å–µ—Ä–∏–∏ + 6 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞).")
    
    def _get_valid_birth_date(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
        while True:
            birth_date = input("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î): ").strip()
            try:
                birth_date_obj = datetime.strptime(birth_date, '%Y-%m-%d').date()
                today = date.today()
                
                if birth_date_obj > today:
                    print("‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
                    continue
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
                age = today.year - birth_date_obj.year
                if today.month < birth_date_obj.month or (today.month == birth_date_obj.month and today.day < birth_date_obj.day):
                    age -= 1
                
                if age < 18:
                    print("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å 18 –ª–µ—Ç")
                    continue
                
                if age > 120:
                    print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è")
                    continue
                
                print(f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç")
                return birth_date
                
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
    
    def _get_valid_phone(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        while True:
            phone = input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10-11 —Ü–∏—Ñ—Ä): ").strip()
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
            phone_clean = re.sub(r'\D', '', phone)
            if len(phone_clean) in [10, 11]:
                return phone_clean
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10-11 —Ü–∏—Ñ—Ä).")
    
    def _confirm_registration(self, user_data: Dict[str, Any]) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.clear_screen()
        print("üìã –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò")
        print("=" * 50)
        print(f"üë§ –§–ò–û: {user_data['full_name']}")
        print(f"üîë –õ–æ–≥–∏–Ω: {user_data['login']}")
        print(f"üìß Email: {user_data['email']}")
        print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7{user_data['phone']}")
        print(f"üìá –ü–∞—Å–ø–æ—Ä—Ç: {user_data['passport_series']} {user_data['passport_number']}")
        print(f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['birth_date']}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        birth_date_obj = datetime.strptime(user_data['birth_date'], '%Y-%m-%d').date()
        today = date.today()
        age = today.year - birth_date_obj.year
        if today.month < birth_date_obj.month or (today.month == birth_date_obj.month and today.day < birth_date_obj.day):
            age -= 1
        print(f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç")
        print("=" * 50)
        
        confirm = input("\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        return confirm in ['–¥–∞', '–¥', 'yes', 'y']