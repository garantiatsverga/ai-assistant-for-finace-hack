import logging
from typing import Optional, Dict, Any
from .database import DatabaseManager
from datetime import date

logger = logging.getLogger(__name__)

class AuthManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager
        self.current_user: Optional[Dict[str, Any]] = None
    
    async def register(self,
                    login: str,
                    password: str,
                    email: str,
                    full_name: str,
                    passport_series: str,
                    passport_number: str,
                    birth_date: date,
                    phone: str) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            return await self.db.register_user(
                login, password, email, full_name,
                passport_series, passport_number, birth_date, phone
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return {"success": False, "error": f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}"}
        
    async def login(self, identifier: str, password: str) -> Dict[str, Any]:
        """–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ –ª–æ–≥–∏–Ω—É, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
        user = await self.db.authenticate_user(identifier, password)
        if user:
            self.current_user = user
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['login']} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É")
            return {"success": True, "user": user}
        else:
            return {"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/email/—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"}
    
    def logout(self):
        """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        if self.current_user:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.current_user['login']} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
        self.current_user = None
    
    def is_authenticated(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.current_user is not None
    
    def get_current_user(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        return self.current_user
    
    async def debug_login(self, login: str = "debug_user") -> Dict[str, Any]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—Ö–æ–¥ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è"""
        try:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            async with self.db.pool.acquire() as conn:
                user = await conn.fetchrow('''
                    SELECT id, login, email, full_name, phone,
                        passport_series, passport_number, birth_date, age,
                        is_active
                    FROM users 
                    WHERE login = $1 AND is_active = TRUE
                ''', login)
                
                if user:
                    self.current_user = {
                        'id': user['id'],
                        'login': user['login'],
                        'email': user['email'],
                        'full_name': user['full_name'],
                        'phone': user['phone'],
                        'passport_series': user['passport_series'],
                        'passport_number': user['passport_number'],
                        'birth_date': user['birth_date'],
                        'age': user['age'],
                        'is_active': user['is_active']
                    }
                    logger.info(f"üîß –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—Ö–æ–¥: {self.current_user['login']}")
                    return {"success": True, "user": self.current_user}
                else:
                    return {"success": False, "error": "–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: {e}")
            return {"success": False, "error": f"–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: {str(e)}"}