"""Main AI Assistant module"""
from typing import List, Optional, Dict, Any
import asyncio
import logging
import os
import time

from ..src.cache_manager import EmbeddingCache, MemoryOptimizedCache
from ..src.config_manager import ConfigManager
from ..src.security_checker import SecurityChecker, SecurityError
from ..src.metrics_collector import MetricsCollector
from ..src.dialogue_memory import DialogueMemory
from ..src.llm_adapter import LLMAdapter, LLMError
from ..src.embeddings_manager import EmbeddingsManager

logger = logging.getLogger(__name__)

class SmartDeepThinkRAG:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self, config_path: str = "config.json"):
        self.config = ConfigManager.load_config(config_path)
        self.embedding_manager = EmbeddingsManager()
        self.embedding_cache = EmbeddingCache()
        self.llm = LLMAdapter()
        self.security = SecurityChecker()
        self.metrics = MetricsCollector()
        self.memory = DialogueMemory()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        self.documents = self._load_knowledge_base()
        self.doc_embeddings = self.embedding_manager.precompute_embeddings(
            self.documents, 
            self.embedding_cache
        )
        
        logger.info(f"–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(self.documents)}")

    def _load_knowledge_base(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        """
        knowledge_base_paths = [
            "knowledge_base.txt",  # —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            os.path.join(os.path.dirname(__file__), '..', 'data', 'knowledge_base.txt'),  # –≤ –ø–∞–ø–∫–µ data
            os.path.join(os.path.dirname(__file__), 'knowledge_base.txt')  # —Ä—è–¥–æ–º —Å –º–æ–¥—É–ª–µ–º
        ]
        
        for kb_path in knowledge_base_paths:
            try:
                with open(kb_path, 'r', encoding='utf-8') as f:
                    documents = [line.strip() for line in f if line.strip()]
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∏–∑ {kb_path}: {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                    return documents
            except FileNotFoundError:
                continue
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π {kb_path}: {e}")
                continue
                
        logger.warning("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return []

    async def ask(self, question: str) -> str:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞"""
        start_time = time.time()
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –º–µ—Ç—Ä–∏–∫
            original_question = question
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º deep think
            deepthink_mode = question.endswith(" -deepthink")
            if deepthink_mode:
                question = question[:-10].strip()
                
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–∫–ª–∞–¥–∫—É
            question = self._fix_keyboard_layout(question)
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            embedding_task = self.embedding_manager.get_embedding(question)
            security_task = self.security.check(question)
            
            is_safe, reason = await security_task
            if not is_safe:
                return reason
                
            # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            similar_docs = await self.embedding_manager.find_similar(
                question,
                await embedding_task,
                self.doc_embeddings,
                self.documents
            )
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            answer = await self.llm.generate_answer(question, similar_docs, deepthink_mode)
            
            # –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
            response_time = time.time() - start_time
            intent, _ = self.security.analyze_intent(original_question)
            self.metrics.log_query(original_question, intent, response_time, True)
            
            return f"{answer}\n\n‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫"
            
        except RuntimeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

    def ask_sync(self, question: str) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è ask"""
        return asyncio.run(self.ask(question))

    def _fix_keyboard_layout(self, text: str) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –Ω–∞–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–µ –≤–º–µ—Å—Ç–æ —Ä—É—Å—Å–∫–æ–π.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π, –µ—Å–ª–∏ –∑–∞–º–µ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
        """
        if not text:
            return text

        # –±–∞–∑–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ -> –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ)
        en_chars = "qwertyuiop[]asdfghjkl;'zxcvbnm,./`"
        ru_chars = "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é.—ë"
        en_upper = en_chars.upper()
        ru_upper = ru_chars.upper()

        char_map = str.maketrans(en_chars + en_upper, ru_chars + ru_upper)

        # –æ—Ü–µ–Ω–∫–∞ –¥–æ–ª–∏ —Å–∏–º–≤–æ–ª–æ–≤ –ª–∞—Ç–∏–Ω–∏—Ü—ã (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –æ–±—ã—á–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã)
        latin_count = sum(1 for c in text if c in en_chars + en_upper)
        total_len = len(text)
        latin_ratio = (latin_count / total_len) if total_len > 0 else 0.0

        # –µ—Å–ª–∏ –±–æ–ª–µ–µ 30% —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞
        if latin_ratio > 0.3:
            fixed = text.translate(char_map)
            logger.info("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∞: '%s' -> '%s'", text, fixed)
            return fixed

        return text

# –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç        
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    assistant = SmartDeepThinkRAG()
    
    print("\nAI Assistant –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit' –∏–ª–∏ 'quit'")
    
    while True:
        question = input("\n–í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
        if question.lower() in ['exit', 'quit', '—Å—Ç–æ–ø']:
            break
        if not question:
            continue
            
        print(assistant.ask_sync(question))