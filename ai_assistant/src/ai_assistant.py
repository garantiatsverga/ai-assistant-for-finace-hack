"""Main AI Assistant module"""
from typing import List, Optional, Dict, Any, AsyncGenerator
import asyncio
import logging
import os
import time
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.insert(0, current_dir)

from .cache_manager import EmbeddingCache
from .config_manager import ConfigManager
from .security_checker import SecurityChecker
from .metrics_collector import MetricsCollector
from .dialogue_memory import DialogueMemory
from .llm_adapter import LLMAdapter, LLMError
from .embeddings_manager import EmbeddingsManager

logger = logging.getLogger(__name__)

class AssistantInitializationError(Exception):
    """–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    pass

class SmartDeepThinkRAG:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π streaming"""
    
    def __init__(self, config_path: str = "config.json"):
        try:
            self.config = ConfigManager.load_config(config_path)
            self._validate_config()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.embedding_manager = EmbeddingsManager(
                self.config['embedder']['model_name']
            )
            self.embedding_cache = EmbeddingCache()
            self.llm = LLMAdapter(
                model_name=self.config['model']['name'],
                timeout=self.config.get('model', {}).get('timeout', 30)
            )
            self.security = SecurityChecker()
            self.metrics = MetricsCollector()
            self.memory = DialogueMemory()
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            self.documents = self._load_knowledge_base()
            self.doc_embeddings = self.embedding_manager.precompute_embeddings(
                self.documents, 
                self.embedding_cache
            )
            
            logger.info(f"–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(self.documents)}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
            raise AssistantInitializationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: {e}")

    def _validate_config(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        required_fields = ['model', 'rag', 'embedder']
        for field in required_fields:
            if field not in self.config:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {field}")

    def _load_knowledge_base(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        knowledge_base_paths = [
            "knowledge_base.txt",
            os.path.join(os.path.dirname(__file__), '..', 'data', 'knowledge_base.txt'),
            os.path.join(os.path.dirname(__file__), 'knowledge_base.txt')
        ]
        
        for kb_path in knowledge_base_paths:
            try:
                with open(kb_path, 'r', encoding='utf-8') as f:
                    documents = [line.strip() for line in f if line.strip()]
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∏–∑ {kb_path}: {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                    return documents
            except FileNotFoundError:
                continue
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π {kb_path}: {e}")
                continue
                
        logger.warning("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return []

    async def ask_streaming(self, question: str) -> AsyncGenerator[str, None]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ detailed tracing –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–ª–∞–≥–æ–≤"""
        start_time = time.time()
        
        try:
            logger.info("üîß [1] –ù–∞—á–∞–ª–æ ask_streaming")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–ª–∞–≥–∏ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
            clean_question, flags = self.security._extract_flags(question)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–ª–∞–≥–∏
            if flags:
                yield f"\nüéõÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–ª–∞–≥–∏: {', '.join(flags)}\n"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –º–µ—Ç—Ä–∏–∫
            original_question = question
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º deep think (—É—á–∏—Ç—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏)
            deepthink_mode = question.endswith(" -deepthink") and '-nodeep' not in flags
            if deepthink_mode:
                clean_question = clean_question[:-10].strip()
                
            logger.info("üîß [2] –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–∫–ª–∞–¥–∫—É")
            clean_question = self._fix_keyboard_layout(clean_question)
            
            logger.info("üîß [3] –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
            is_safe, reason = await self.security.check(question)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å —Ñ–ª–∞–≥–∞–º–∏
            
            if not is_safe:
                logger.info("üîß [3a] –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                yield reason
                return
            
            logger.info("üîß [4] –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–∞")
            question_embedding = await self.embedding_manager.get_embedding(clean_question)
            
            logger.info("üîß [5] –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
            similar_docs = await self.embedding_manager.find_similar(
                clean_question,
                question_embedding,
                self.doc_embeddings,
                self.documents,
                top_k=self.config['rag']['top_k_documents']
            )
            
            logger.info(f"üîß [5a] –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(similar_docs)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞
            self.memory.add_message('user', clean_question)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º
            full_response = ""
            
            # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∞
            logger.info("üîß [6] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∞")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ
            if '-simple' in flags:
                yield "\nü§ñ [–ü–†–û–°–¢–û–ô –†–ï–ñ–ò–ú] "
            elif flags:
                yield f"\nü§ñ [–†–ï–ñ–ò–ú: {', '.join(flags)}] "
            else:
                yield "\nü§ñ –û—Ç–≤–µ—Ç: "
            
            # –ó–∞—Ç–µ–º —Å—Ç—Ä–∏–º–∏–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            logger.info("üîß [7] –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç LLM")
            chunk_count = 0
            
            # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥–∏ –≤ LLM –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            async for chunk in self.llm.generate_answer_streaming(clean_question, similar_docs, deepthink_mode, flags):
                logger.info(f"üîß [7a] –ü–æ–ª—É—á–µ–Ω chunk #{chunk_count}: '{chunk}'")
                chunk_count += 1
                yield chunk
                full_response += chunk
            
            logger.info(f"üîß [8] –°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ß–∞–Ω–∫–æ–≤: {chunk_count}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å
            self.memory.add_message('assistant', full_response)
            
            # –í –∫–æ–Ω—Ü–µ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            response_time = time.time() - start_time
            time_info = f"\n\n‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫"
            logger.info(f"üîß [9] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f}—Å–µ–∫")
            yield time_info
            
            # –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
            intent, _ = self.security.analyze_intent(original_question)
            self.metrics.log_query(original_question, intent, response_time, True)
            
            logger.info("üîß [10] Ask_streaming –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ ask_streaming: {e}", exc_info=True)
            yield f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

    async def ask(self, question: str) -> str:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏–∑ main.py"""
        full_response = ""
        async for chunk in self.ask_streaming(question):
            print(chunk, end='', flush=True)
            full_response += chunk
        print()  # –ö–æ–Ω–µ—á–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        return full_response
    
    async def ask_streaming_wrapper(self, question: str) -> None:
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–Ω—Å–æ–ª—å"""
        async for chunk in self.ask_streaming(question):
            print(chunk, end='', flush=True)
        print()  # –ö–æ–Ω–µ—á–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏

    def ask_sync(self, question: str) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"""
        import asyncio
        
        # –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        # –ë–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö event loops
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π loop
            loop = asyncio.get_event_loop()
            if loop.is_running():
                # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run_coroutine_threadsafe
                future = asyncio.run_coroutine_threadsafe(self.ask(question), loop)
                return future.result()
            else:
                # –ï—Å–ª–∏ loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º run_until_complete
                return loop.run_until_complete(self.ask(question))
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ—Ç event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            return asyncio.run(self.ask(question))

    def _fix_keyboard_layout(self, text: str) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –Ω–∞–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–µ –≤–º–µ—Å—Ç–æ —Ä—É—Å—Å–∫–æ–π"""
        if not text:
            return text

        en_chars = "qwertyuiop[]asdfghjkl;'zxcvbnm,./`"
        ru_chars = "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é.—ë"
        en_upper = en_chars.upper()
        ru_upper = ru_chars.upper()

        char_map = str.maketrans(en_chars + en_upper, ru_chars + ru_upper)

        latin_count = sum(1 for c in text if c in en_chars + en_upper)
        total_len = len(text)
        latin_ratio = (latin_count / total_len) if total_len > 0 else 0.0

        if latin_ratio > 0.3:
            fixed = text.translate(char_map)
            logger.info("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∞: '%s' -> '%s'", text, fixed)
            return fixed

        return text

# –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç        
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    
    try:
        assistant = SmartDeepThinkRAG()
        
        print("\nüéØ AI Assistant –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üí° –î–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–±–∞–≤—å—Ç–µ '-deepthink' –∫ –≤–æ–ø—Ä–æ—Å—É")
        print("üö™ –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit', 'quit' –∏–ª–∏ '—Å—Ç–æ–ø'")
        
        while True:
            question = input("\nüí¨ –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
            if question.lower() in ['exit', 'quit', '—Å—Ç–æ–ø']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            if not question:
                continue
                
            assistant.ask_sync(question)
            
    except AssistantInitializationError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    except KeyboardInterrupt:
        print("\nüëã –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")