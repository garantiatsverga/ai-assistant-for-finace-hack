"""–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
import logging
from typing import Dict, Any, Optional, AsyncGenerator
import asyncio
import time

from .ai_assistant import SmartDeepThinkRAG

# –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–µ—Ä—ã
try:
    from ai_assistant.parsers.financial_parser import FinancialDataParser
    from ai_assistant.parsers.alerts_manager import PriceAlertsManager
    PARSERS_AVAILABLE = True
except ImportError as e:
    PARSERS_AVAILABLE = False
    print(f"–ü–∞—Ä—Å–µ—Ä—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

logger = logging.getLogger(__name__)

class FinancialAssistant(SmartDeepThinkRAG):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    def __init__(self, config_path: str = "config.json"):
        super().__init__(config_path)
        
        self.financial_parser = None
        self.alerts_manager = None
        
        if PARSERS_AVAILABLE:
            try:
                self.financial_parser = FinancialDataParser()
                self.alerts_manager = PriceAlertsManager()
                logger.info("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä—Å–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤: {e}")
                self.financial_parser = None
        else:
            logger.warning("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä—Å–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    async def ask_streaming(self, question: str) -> AsyncGenerator[str, None]:
        """–ü–ï–†–ï–û–ü–†–ï–î–ï–õ–Ø–ï–ú streaming –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        start_time = time.time()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        financial_response = await self._handle_financial_question(question)
        if financial_response is not None:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ —Å—Ç—Ä–∏–º
            yield "\n–û—Ç–≤–µ—Ç: "
            yield financial_response
            yield f"\n\n‚è±–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫"
            return
        
        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π RAG —Å—Ç—Ä–∏–º–∏–Ω–≥
        async for chunk in super().ask_streaming(question):
            yield chunk
    
    async def ask(self, question: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ü–†–ò–û–†–ò–¢–ï–¢–û–ú —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        financial_response = await self._handle_financial_question(question)
        if financial_response is not None:
            return financial_response
        
        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π RAG
        return await super().ask(question)
    
    async def _handle_financial_question(self, question: str) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        if not self.financial_parser:
            return None  # –ü—É—Å—Ç—å –±–∞–∑–æ–≤—ã–π RAG –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
        
        question_lower = question.lower()
        
        try:
            if any(word in question_lower for word in ['—Å—Ç–∞–≤–∫', '–∫–ª—é—á–µ–≤', '—Ü–±', '—Ü–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫', '–ø—Ä–æ—Ü–µ–Ω—Ç']):
                data = await self.financial_parser.get_market_summary()
                
                if 'key_rate' in data and data['key_rate'] and 'error' not in data['key_rate']:
                    rate_info = data['key_rate']
                    rate = rate_info.get('rate', 'N/A')
                    
                    response = f"–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§: {rate}%".upper()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if 'date' in rate_info:
                        response += f"\n–î–∞—Ç–∞: {rate_info['date']}".upper()
                    if 'next_meeting' in rate_info:
                        response += f"\n–°–ª–µ–¥—É—é—â–µ–µ –∑–∞—Å–µ–¥–∞–Ω–∏–µ: {rate_info['next_meeting']}".upper()
                    if 'note' in rate_info:
                        response += f"\n{rate_info['note']}".upper()
                    
                    return response
                else:
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–µ –¶–ë"
            
            elif any(word in question_lower for word in ['–∞–∫—Ü–∏', '—Ç–∏–∫–µ—Ä', '–∫–æ—Ç–∏—Ä–æ–≤–∫', '—Ü–µ–Ω–∞ –∞–∫—Ü–∏']):
                symbols = {
                    'sber': 'SBER', '—Å–±–µ—Ä': 'SBER', '—Å–±–µ—Ä–±–∞–Ω–∫': 'SBER',
                    'gazp': 'GAZP', '–≥–∞–∑–ø—Ä–æ–º': 'GAZP', 
                    'lkoh': 'LKOH', '–ª—É–∫–æ–π–ª': 'LKOH',
                    'vtbr': 'VTBR', '–≤—Ç–±': 'VTBR',
                    'rosn': 'ROSN', '—Ä–æ—Å–Ω–µ—Ñ—Ç—å': 'ROSN'
                }
                
                symbol_found = None
                for keyword, symbol in symbols.items():
                    if keyword in question_lower:
                        symbol_found = symbol
                        break
                
                if not symbol_found:
                    symbol_found = 'SBER'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                data = await self.financial_parser.get_stock_price(symbol_found)
                return self._format_stock_response(data)
            
            elif any(word in question_lower for word in ['–∫—É—Ä—Å', '–≤–∞–ª—é—Ç', '–¥–æ–ª–ª–∞—Ä', '–µ–≤—Ä–æ', 'usd', 'eur']):
                data = await self.financial_parser.get_currency_rates()
                return self._format_currency_response(data)
            
            elif any(word in question_lower for word in ['–±–∏—Ä–∂–∞', '—Ä—ã–Ω–æ–∫', '–∏–Ω–¥–µ–∫—Å', '—Å–≤–æ–¥–∫', '–º–æ—Å–±–∏—Ä–∂', '—Ñ–∏–Ω–∞–Ω—Å']):
                data = await self.financial_parser.get_market_summary()
                return self._format_market_summary(data)
            
            elif any(word in question_lower for word in ['—Å–±–µ—Ä–±–∞–Ω–∫', '–≥–∞–∑–ø—Ä–æ–º', '–ª—É–∫–æ–π–ª', '–≤—Ç–±', '—Ä–æ—Å–Ω–µ—Ñ—Ç—å']):
                symbols = {
                    '—Å–±–µ—Ä–±–∞–Ω–∫': 'SBER', '–≥–∞–∑–ø—Ä–æ–º': 'GAZP', '–ª—É–∫–æ–π–ª': 'LKOH',
                    '–≤—Ç–±': 'VTBR', '—Ä–æ—Å–Ω–µ—Ñ—Ç—å': 'ROSN'
                }
                
                for name, symbol in symbols.items():
                    if name in question_lower:
                        data = await self.financial_parser.get_stock_price(symbol)
                        return self._format_stock_response(data)
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        
        return None
    
    def _format_stock_response(self, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∞–∫—Ü–∏–∏"""
        if 'error' in data:
            return f"{data['error']}"
        
        change = data.get('change', 0)
        change_percent = data.get('change_percent', 0)
        change_icon = "üìà" if change >= 0 else "üìâ"
        change_color = "+" if change >= 0 else ""
        
        response = f"""
{change_icon} **{data.get('name', data['symbol'])}** ({data['symbol']})

–¶–µ–Ω–∞:{data.get('last_price', 'N/A')} —Ä—É–±.
–ò–∑–º–µ–Ω–µ–Ω–∏–µ:{change_color}{change} ({change_color}{change_percent}%)
–û–±—ä–µ–º:{self._format_number(data.get('volume', 0))}
–ò—Å—Ç–æ—á–Ω–∏–∫: {data.get('source', 'MOEX')}
""".upper()
        return response
    
    def _format_currency_response(self, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º"""
        if 'error' in data:
            return f"{data['error']}"
        
        response = "üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§:\n\n".upper()
        
        main_currencies = ['USD', 'EUR', 'CNY']
        found_currencies = 0
        
        for currency in main_currencies:
            if currency in data and 'error' not in data[currency]:
                info = data[currency]
                change = info.get('change', 0)
                change_icon = "üìà" if change >= 0 else "üìâ"
                change_color = "+" if change >= 0 else ""
                
                response += f"{change_icon} **{info['name']}:** {info['value']} —Ä—É–±. "
                if change != 0:
                    response += f"({change_color}{change:.2f}, {change_color}{info.get('change_percent', 0):.2f}%)\n"
                else:
                    response += "\n"
                found_currencies += 1
        
        if found_currencies == 0:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç"
        
        return response
    
    def _format_market_summary(self, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ä—ã–Ω–∫–∞"""
        if 'error' in data:
            return f"{data['error']}"
        
        response = "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞:\n\n".upper()
        
        # –ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞
        if data.get('key_rate') and 'error' not in data['key_rate']:
            rate_info = data['key_rate']
            response += f"–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë: {rate_info.get('rate', 'N/A')}%\n\n"
        
        # –ò–Ω–¥–µ–∫—Å—ã
        if data.get('indices'):
            indices_data = data['indices']
            response += "–û–°–ù–û–í–ù–´–ï –ò–ù–î–ï–ö–°–´:\n".upper()
            
            for index_key in ['IMOEX', 'RTSI']:
                if index_key in indices_data and 'error' not in indices_data[index_key]:
                    info = indices_data[index_key]
                    change = info.get('change', 0)
                    change_icon = "üìà" if change >= 0 else "üìâ"
                    change_color = "+" if change >= 0 else ""
                    
                    response += f"  {change_icon} {info.get('name', index_key)}: {info.get('value', 'N/A')} "
                    if change != 0:
                        response += f"({change_color}{change:.2f})\n"
                    else:
                        response += "\n"
        
        # –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
        if data.get('currencies'):
            currencies_data = data['currencies']
            if 'error' not in currencies_data:
                response += "\nüí± **–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:**\n"
                
                for currency in ['USD', 'EUR']:
                    if currency in currencies_data and 'error' not in currencies_data[currency]:
                        info = currencies_data[currency]
                        response += f"  üá∫üá∏ {currency}: {info.get('value', 'N/A')} —Ä—É–±.\n"
        
        return response
    
    def _format_number(self, number: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª"""
        if number >= 1_000_000_000:
            return f"{number/1_000_000_000:.1f} –º–ª—Ä–¥"
        elif number >= 1_000_000:
            return f"{number/1_000_000:.1f} –º–ª–Ω"
        elif number >= 1_000:
            return f"{number/1_000:.1f} —Ç—ã—Å"
        return str(number)
    
    async def ask_streaming_wrapper(self, question: str) -> None:
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        async for chunk in self.ask_streaming(question):
            print(chunk, end='', flush=True)
        print()
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.financial_parser and hasattr(self.financial_parser, 'close'):
            await self.financial_parser.close()
        await super().close() if hasattr(super(), 'close') else None