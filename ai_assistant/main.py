"""–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ AI Assistant —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
import os
import sys
import asyncio
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, current_dir)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logging.basicConfig(
        level=logging.ERROR,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('assistant.log', encoding='utf-8')
        ]
    )

    logging.getLogger('ai_assistant.src.ai_assistant').setLevel(logging.WARNING)
    logging.getLogger('ai_assistant.src.llm_adapter').setLevel(logging.WARNING)
    logging.getLogger('ai_assistant.src.embeddings_manager').setLevel(logging.WARNING)

    return logging.getLogger(__name__)

class AIAssistantApp:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AI Assistant"""
    
    def __init__(self):
        self.logger = setup_logging()
        self.db_manager = None
        self.auth_manager = None
        self.auth_ui = None
        self.assistant = None
    
    async def initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            
            # –ê–ë–°–û–õ–Æ–¢–ù–´–ï –∏–º–ø–æ—Ä—Ç—ã
            from ai_assistant.registration.database import DatabaseManager
            from ai_assistant.registration.auth_manager import AuthManager
            from ai_assistant.registration.auth_ui import AuthUI
            from ai_assistant.src.financial_assistant import FinancialAssistant
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            connection_string = "postgresql://postgres@localhost:5432/bank_assistant"
            self.db_manager = DatabaseManager(connection_string)
            await self.db_manager.connect()
            self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            self.auth_manager = AuthManager(self.db_manager)
            self.auth_ui = AuthUI(self.auth_manager)
            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            self.assistant = FinancialAssistant()
            self.logger.info("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            self.logger.info("üéØ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return True
            
        except ImportError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            print("üìÅ –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
            for root, dirs, files in os.walk(current_dir):
                level = root.replace(current_dir, '').count(os.sep)
                indent = ' ' * 2 * level
                print(f'{indent}{os.path.basename(root)}/')
                subindent = ' ' * 2 * (level + 1)
                for file in files:
                    if file.endswith('.py'):
                        print(f'{subindent}{file}')
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def show_welcome_screen(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
        import os
        os.system('clear' if os.name == 'posix' else 'cls')
        
        print("üéØ –ë–ê–ù–ö–û–í–°–ö–ò–ô –ò–ò-–ê–°–°–ò–°–¢–ï–ù–¢ –° –§–ò–ù–ê–ù–°–û–í–´–ú–ò –î–ê–ù–ù–´–ú–ò")
        print("=" * 60)
        print("üìä –¢–µ–ø–µ—Ä—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å –±–∏—Ä–∂ –∏ –¶–ë –†–§!")
        print("=" * 60)
        print("1. üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        print("2. üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        print("3. üö™ –í—ã—Ö–æ–¥")
        print("4. üöÄ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—Ö–æ–¥ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)")
        print("=" * 60)
    
    async def handle_user_choice(self, choice: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if choice == '1':  # –û–±—ã—á–Ω—ã–π –≤—Ö–æ–¥
                return await self.auth_ui.handle_login()
            
            elif choice == '2':  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                return await self.auth_ui.handle_registration()
            
            elif choice == '3':  # –í—ã—Ö–æ–¥
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                return True
            
            elif choice == '4':  # üÜï –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—Ö–æ–¥
                return await self.auth_ui.handle_debug_login()
            
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞: {e}")
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            return False

    async def show_welcome_screen(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –æ–ø—Ü–∏–µ–π"""
        import os
        os.system('clear' if os.name == 'posix' else 'cls')
        
        print("üéØ –ë–ê–ù–ö–û–í–°–ö–ò–ô –ò–ò-–ê–°–°–ò–°–¢–ï–ù–¢ –° –§–ò–ù–ê–ù–°–û–í–´–ú–ò –î–ê–ù–ù–´–ú–ò")
        print("=" * 60)
        print("üìä –¢–µ–ø–µ—Ä—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å –±–∏—Ä–∂ –∏ –¶–ë –†–§!")
        print("=" * 60)
        print("1. üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        print("2. üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è") 
        print("3. üö™ –í—ã—Ö–æ–¥")
        print("4. üöÄ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—Ö–æ–¥ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)")
        print("=" * 60)

    async def run_assistant_session(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞"""
        print("\n" + "="*60)
        print("üéØ –ó–ê–ü–£–°–ö –ê–°–°–ò–°–¢–ï–ù–¢–ê...")
        print("="*60)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–°–°–ò–ò:")
        print(f"   - –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {'‚úÖ' if self.assistant else '‚ùå'}")
        print(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {'‚úÖ' if self.auth_manager.is_authenticated() else '‚ùå'}")
        
        if self.auth_manager.is_authenticated():
            user = self.auth_manager.get_current_user()
            print(f"   - –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['full_name']} ({user['login']})")
        else:
            print("‚ùå –û–®–ò–ë–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!")
            print("üîç –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
            return
        
        if not self.assistant:
            print("‚ùå –û–®–ò–ë–ö–ê: –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return
        
        print("\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("   - 'exit', 'quit', '–≤—ã—Ö–æ–¥' - –≤—ã—Ö–æ–¥ –∏–∑ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
        print("   - '-deepthink' - —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        print("="*60)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        while True:
            try:
                question = input("\nüí¨ –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
                
                # –ö–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
                if question.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥', 'logout']:
                    print("\nüîç –í—ã—Ö–æ–¥ –∏–∑ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
                    self.auth_manager.logout()
                    print("üëã –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
                    break
                
                if not question:
                    continue
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                print(f"\nüîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: '{question}'")
                await self.assistant.ask_streaming_wrapper(question)
                
            except KeyboardInterrupt:
                print("\n\nüëã –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                self.auth_manager.logout()
                break
            except EOFError:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                self.auth_manager.logout()
                break
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
                print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                continue
    
    async def main_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            if not await self.initialize_components():
                return
            
            # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
            while True:
                try:
                    await self.show_welcome_screen()
                    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
                    
                    if choice == '3':  # –í—ã—Ö–æ–¥
                        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        break
                    
                    success = await self.handle_user_choice(choice)
                    
                    if success and choice in ['1', '4']:  # –û–±—ã—á–Ω—ã–π –≤—Ö–æ–¥ –ò–õ–ò –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—Ö–æ–¥
                        await self.run_assistant_session()
                        
                    elif success and choice == '2':  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                        print("\nüìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏? (–¥–∞/–Ω–µ—Ç)")
                        login_choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip().lower()
                        if login_choice in ['–¥–∞', '–¥', 'yes', 'y']:
                            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ–π—Ç–∏ —Å —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                            login_success = await self.auth_ui.handle_login()
                            if login_success:
                                await self.run_assistant_session()
                            
                except KeyboardInterrupt:
                    print("\n\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    break
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                    print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.cleanup()
    
    async def main_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            if not await self.initialize_components():
                return
            
            # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
            while True:
                try:
                    await self.show_welcome_screen()
                    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
                    
                    if choice == '3':  # –í—ã—Ö–æ–¥
                        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        break
                    
                    success = await self.handle_user_choice(choice)
                    
                    # üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω (–æ–±—ã—á–Ω—ã–π –ò–õ–ò –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π) - –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                    if success and choice in ['1', '4']:
                        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
                        await self.run_assistant_session()
                        
                    elif success and choice == '2':  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                        print("\nüìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏? (–¥–∞/–Ω–µ—Ç)")
                        login_choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip().lower()
                        if login_choice in ['–¥–∞', '–¥', 'yes', 'y']:
                            login_success = await self.auth_ui.handle_login()
                            if login_success:
                                await self.run_assistant_session()
                            
                except KeyboardInterrupt:
                    print("\n\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    break
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                    print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.cleanup()
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        self.logger.info("–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            if self.assistant and hasattr(self.assistant, 'close'):
                await self.assistant.close()
                self.logger.info("‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if self.db_manager:
                await self.db_manager.close()
                self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
        
        self.logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ AI Assistant –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤...")
    
    app = AIAssistantApp()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        asyncio.run(app.main_loop())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)